<?xml version="1.0" encoding="UTF-8"?>
<!-- 
@category    Mana
@package     Mana_AttributePage
@copyright   Copyright (c) http://www.manadev.com
@license     http://www.manadev.com/license  Proprietary License
 -->
<config>
    <!-- This section registers module with Magento system. -->
    <modules>
        <Mana_AttributePage>
            <!-- This version number identifies version of database tables specific to this extension. It is written to
		  	core_resource table.  -->
            <version>13.01.18.23</version>
        </Mana_AttributePage>
    </modules>
    <!-- This section contains module settings which are merged into global configuration during each page load, 
	each ajax request. -->
    <global>
        <!-- This section registers helper classes to be accessible through Mage::helper() method. Mana_AttributePage_Helper_Data
		class is accessible through Mage::helper('mana_attributepage') call, other Mana_AttributePage_Helper_XXX_YYY classes are accessible 
		through  Mage::helper('mana_attributepage/xxx_yyy') call. -->
        <helpers>
            <mana_attributepage>
                <!-- This says that string 'mana_attributepage' corresponds to Mana_AttributePage_Helper pseudo-namespace in 
				Mage::helper() calls. -->
                <class>Mana_AttributePage_Helper</class>
            </mana_attributepage>
        </helpers>
        <!-- This section registers block classes Mana_AttributePage_Block_XXX_YYY to be accessible through
            'mana_attributepage/xxx_yyy' shortcuts. -->
        <blocks>
            <!-- This says that string 'mana_attributepage' corresponds to Mana_AttributePage_Block pseudo-namespace. -->
            <mana_attributepage>
                <class>Mana_AttributePage_Block</class>
            </mana_attributepage>
            <!-- INSERT HERE: rewrites, ... -->
        </blocks>
        <!-- This section registers model classes to be accessible through Mage::getModel('<model type>') and through
            Mage::getSingleton('<model type>') calls. That is, Mana_AttributePage_Model_XXX_YYY classes are accessible as
            'mana_attributepage/xxx_yyy' type strings both in getModel() and getSingleton() calls. -->
        <models>
            <!-- This says that string 'mana_attributepage' corresponds to Mana_AttributePage_Model pseudo-namespace in
                getModel() and getSingleton() calls. -->
            <mana_attributepage>
                <class>Mana_AttributePage_Model</class>
                <!-- This tells Magento to read config/global/models/mana_attributepage_resources sections and register
                    resource model information from there -->
                <resourceModel>mana_attributepage_resources</resourceModel>
            </mana_attributepage>
            <!-- This says that string 'mana_attributepage' corresponds to Mana_AttributePage_Resource pseudo-namespace in
                getResourceModel() calls. -->
            <mana_attributepage_resources>
                <class>Mana_AttributePage_Resource</class>
                <entities>
					<page><table>m_attribute_page</table></page>
					<page_flat><table>m_attribute_page_flat</table></page_flat>
					<page_store><table>m_attribute_page_store</table></page_store>
					<page_store_flat><table>m_attribute_page_store_flat</table></page_store_flat>
					<page_attribute><table>m_attribute_page_attribute</table></page_attribute>
					<option_page><table>m_attribute_option_page</table></option_page>
					<option_page_default><table>m_attribute_option_page_default</table></option_page_default>
					<option_page_flat><table>m_attribute_option_page_flat</table></option_page_flat>
					<option_page_store><table>m_attribute_option_page_store</table></option_page_store>
					<option_page_store_flat><table>m_attribute_option_page_store_flat</table></option_page_store_flat>
					<option_page_option><table>m_attribute_option_page_option</table></option_page_option>
                </entities>
            </mana_attributepage_resources>
            <!-- INSERT HERE: rewrites, ... -->
        </models>
        <!-- This tells Magento to analyze sql/mana_attributepage_setup directory for install/upgrade scripts.
            Installation scripts should be named as 'mysql4-install-<new version>.php'.
            Upgrade scripts should be named as mysql4-upgrade-<current version>-<new version>.php -->
        <resources>
            <mana_attributepage_setup>
                <setup>
                    <module>Mana_AttributePage</module>
                </setup>
            </mana_attributepage_setup>
        </resources>
        <index>
            <indexer>
                <mana_attribute_page translate="name description" module="mana_attributepage">
                    <model>mana_attributepage/indexer</model>
                    <name>Attribute Pages (MANAdev)</name>
                    <description>Recalculates formula-based settings in attribute and attribute option pages</description>
                    <targets>
                        <page>
                            <entity>mana_attributepage/page</entity>
                        </page>
                        <!--<option_page>
                            <entity>mana_attributepage/option_page</entity>
                            <depends>
                                <page />
                            </depends>
                        </option_page>-->
                    </targets>
                </mana_attribute_page>
            </indexer>
        </index>
        <!-- INSERT HERE: blocks, models, ... -->
    </global>
    <!-- This section enables static visual changes in admin area. -->
    <adminhtml>
        <!-- This section registers additional translation file with our module-specific strings to be loaded -->
        <translate>
            <modules>
                <Mana_AttributePage>
                    <files>
                        <default>Mana_AttributePage.csv</default>
                    </files>
                </Mana_AttributePage>
            </modules>
        </translate>
        <!-- This section registers additional layout XML file with our module-specific layout changes to be loaded
            and executes during page rendering. -->
        <layout>
            <updates>
                <mana_attributepage>
                    <file>mana_attributepage.xml</file>
                </mana_attributepage>
            </updates>
        </layout>

        <!-- This section registers event handlers of this module defined in Mana_AttributePage_Model_Observer with
            events defined in other module throughout the system. So when some code in other module invokes an event
            mentioned in this section, handler method of Mana_AttributePage_Model_Observer class gets called. -->
        <events>
            <controller_action_layout_generate_blocks_after><!-- this is event name this module listens for -->
                <observers>
                    <mana_attributepage>
                        <class>mana_attributepage/observer</class>
                        <!-- model name of class containing event handler methods -->
                        <method>loadDynamicMenuItems</method>
                        <!-- event handler method name -->
                    </mana_attributepage>
                </observers>
            </controller_action_layout_generate_blocks_after>
        </events>
        <!-- INSERT HERE: layout, translate, routers -->
    </adminhtml>
    <!-- This section enables static visual changes in frontend area. -->
    <frontend>
        <!-- This section registers additional layout XML file with our module-specific layout changes to be loaded
            and executes during page rendering. -->
        <layout>
            <updates>
                <mana_attributepage>
                    <file>mana_attributepage.xml</file>
                </mana_attributepage>
            </updates>
        </layout>
        <!-- INSERT HERE: layout, translate, routers -->
    </frontend>
    <!-- INSERT HERE: adminhtml, frontend, ... -->
    <!-- All the following subscribes to listening to /admin/* urls and tries to map is to appropriate action
     method in this modules controllers folder. That is for /admin/a/b it will search for controllers/A.php, in it
     it will expect Mana_AttributePage_Adminhtml_AController class, and in class it will expect bAction() method. In most cases,
     when it does not find suitable method, dispatcher continues with searching in Mage_Adminhtml module. -->
    <admin>
        <routers>
            <adminhtml>
                <args>
                    <modules>
                        <mana_attributepage before="Mage_Adminhtml">Mana_AttributePage_Adminhtml</mana_attributepage>
                    </modules>
                </args>
            </adminhtml>
        </routers>
    </admin>
</config>