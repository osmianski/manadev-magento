<?xml version="1.0" encoding="UTF-8"?>
<!--
@category    Mana
@package     M_Theme
@copyright   Copyright (c) http://www.manadev.com
@license     http://www.manadev.com/license  Proprietary License
 -->
<config>
    <!-- This section registers module with Magento system. -->
    <modules>
        <M_Theme>
            <!-- This version number identifies version of database tables specific to this extension. It is written to
		  	core_resource table.  -->
            <version>12.08.06.15</version>
        </M_Theme>
    </modules>
    <!-- This section contains module settings which are merged into global configuration during each page load, 
	each ajax request. -->
    <global>
        <!-- This section registers helper classes to be accessible through Mage::helper() method. M_Theme_Helper_Data
		class is accessible through Mage::helper('m_theme') call, other M_Theme_Helper_XXX_YYY classes are accessible 
		through  Mage::helper('m_theme/xxx_yyy') call. -->
        <helpers>
            <m_theme>
                <!-- This says that string 'm_theme' corresponds to M_Theme_Helper pseudo-namespace in 
				Mage::helper() calls. -->
                <class>M_Theme_Helper</class>
            </m_theme>
        </helpers>
        <!-- This section registers block classes M_Theme_Block_XXX_YYY to be accessible through
            'm_theme/xxx_yyy' shortcuts. -->
        <blocks>
            <!-- This says that string 'm_theme' corresponds to M_Theme_Block pseudo-namespace. -->
            <m_theme>
                <class>M_Theme_Block</class>
            </m_theme>
            <customer>
                <rewrite>
                    <form_login>M_Theme_Block_Login</form_login>
                </rewrite>
            </customer>
            <catalog>
                <rewrite>
                    <product_list_toolbar>M_Theme_Block_List_Toolbar</product_list_toolbar>
                </rewrite>
            </catalog>
            <!-- INSERT HERE: rewrites, ... -->
        </blocks>
        <!-- This section registers model classes to be accessible through Mage::getModel('<model type>') and through
            Mage::getSingleton('<model type>') calls. That is, M_Theme_Model_XXX_YYY classes are accessible as
            'm_theme/xxx_yyy' type strings both in getModel() and getSingleton() calls. -->
        <models>
            <!-- This says that string 'm_theme' corresponds to M_Theme_Model pseudo-namespace in
                getModel() and getSingleton() calls. -->
            <m_theme>
                <class>M_Theme_Model</class>
                <!-- INSERT HERE: resource section name -->
            </m_theme>
            <!-- INSERT HERE: rewrites, ... -->
        </models>
    </global>
    <!-- This section enables static visual changes in frontend area. -->
    <frontend>
        <routers>
            <m_theme>
                <use>standard</use>
                <args>
                    <module>M_Theme</module>
                    <frontName>cf</frontName>
                </args>
            </m_theme>
        </routers>
        <!-- This section registers additional layout XML file with our module-specific layout changes to be loaded
            and executes during page rendering. -->
        <layout>
            <updates>
                <m_theme>
                    <file>m_theme.xml</file>
                </m_theme>
            </updates>
        </layout>
        <!-- This section registers event handlers of this module defined in M_Theme_Model_Observer with
            events defined in other module throughout the system. So when some code in other module invokes an event
            mentioned in this section, handler method of M_Theme_Model_Observer class gets called. -->
        <events>
            <core_block_abstract_to_html_before><!-- this is event name this module listens for -->
                <observers>
                    <m_theme>
                        <class>m_theme/observer</class>
                        <!-- model name of class containing event handler methods -->
                        <method>setTemplate</method>
                        <!-- event handler method name -->
                    </m_theme>
                </observers>
            </core_block_abstract_to_html_before>
        </events>
        <!-- INSERT HERE: layout, translate, routers -->
    </frontend>
    <!-- This section enables static visual changes in admin area. -->
    <adminhtml>
        <!-- This section registers additional translation file with our module-specific strings to be loaded -->
        <translate>
            <modules>
                <M_Theme>
                    <files>
                        <default>M_Theme.csv</default>
                    </files>
                </M_Theme>
            </modules>
        </translate>
    </adminhtml>
    <!-- INSERT HERE: adminhtml, frontend, ... -->
</config>